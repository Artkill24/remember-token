name: Remember Token CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test-contracts:
    name: Test Smart Contracts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Compile contracts
      run: npm run compile
      
    - name: Run contract tests
      run: npm test
      
    - name: Generate coverage report
      run: npm run coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: contracts
        name: contract-coverage

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install frontend dependencies
      run: cd frontend && npm ci
      
    - name: Lint frontend code
      run: cd frontend && npm run lint
      
    - name: Build frontend
      run: cd frontend && npm run build
      env:
        VITE_CONTRACT_ADDRESS: '0x0000000000000000000000000000000000000000'
        VITE_CHAIN_ID: '84532'

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run Slither analysis
      uses: crytic/slither-action@v0.3.0
      id: slither
      with:
        target: 'contracts/'
        slither-config: 'slither.config.json'
        fail-on: none
      continue-on-error: true

  deploy-testnet:
    name: Deploy to Base Testnet
    runs-on: ubuntu-latest
    needs: [test-contracts, test-frontend]
    if: github.ref == 'refs/heads/develop'
    environment: testnet
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Compile contracts
      run: npm run compile
      
    - name: Deploy to Base Testnet
      run: npm run deploy:base-testnet
      env:
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
        
    - name: Verify contract
      run: npm run verify
      env:
        CONTRACT_ADDRESS: ${{ env.CONTRACT_ADDRESS }}
        BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
      continue-on-error: true
      
    - name: Update deployment info
      run: |
        echo "TESTNET_CONTRACT_ADDRESS=$CONTRACT_ADDRESS" >> $GITHUB_ENV
        echo "Testnet deployment: $CONTRACT_ADDRESS" >> $GITHUB_STEP_SUMMARY

  deploy-frontend-staging:
    name: Deploy Frontend to Staging
    runs-on: ubuntu-latest
    needs: [deploy-testnet]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install frontend dependencies
      run: cd frontend && npm ci
      
    - name: Build frontend for staging
      run: cd frontend && npm run build
      env:
        VITE_CONTRACT_ADDRESS: ${{ env.TESTNET_CONTRACT_ADDRESS }}
        VITE_CHAIN_ID: '84532'
        VITE_API_BASE_URL: 'https://api-staging.project-block.com'
        
    - name: Deploy to staging
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./frontend/dist
        cname: staging.project-block.com

  deploy-mainnet:
    name: Deploy to Base Mainnet
    runs-on: ubuntu-latest
    needs: [test-contracts, test-frontend, security-audit]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Compile contracts
      run: npm run compile
      
    - name: Deploy to Base Mainnet
      run: npm run deploy:base-mainnet
      env:
        PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
        BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
        
    - name: Verify contract
      run: npm run verify
      env:
        CONTRACT_ADDRESS: ${{ env.CONTRACT_ADDRESS }}
        BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
        
    - name: Update deployment info
      run: |
        echo "MAINNET_CONTRACT_ADDRESS=$CONTRACT_ADDRESS" >> $GITHUB_ENV
        echo "Production deployment: $CONTRACT_ADDRESS" >> $GITHUB_STEP_SUMMARY
        
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: Remember Token v1.0.${{ github.run_number }}
        body: |
          🎂 Remember Token Production Deployment
          
          **Contract Address:** ${{ env.MAINNET_CONTRACT_ADDRESS }}
          **Network:** Base Mainnet (Chain ID: 8453)
          **Explorer:** https://basescan.org/address/${{ env.MAINNET_CONTRACT_ADDRESS }}
          
          ## What's New
          - Smart contract deployed to Base Mainnet
          - Frontend updated with production contract
          - Full security audit completed
          
          ## Quick Start
          1. Visit [project-block.com](https://project-block.com)
          2. Connect your Base wallet
          3. Start creating memories and earning $RMEM tokens!
        draft: false
        prerelease: false

  deploy-frontend-production:
    name: Deploy Frontend to Production
    runs-on: ubuntu-latest
    needs: [deploy-mainnet]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install frontend dependencies
      run: cd frontend && npm ci
      
    - name: Build frontend for production
      run: cd frontend && npm run build
      env:
        VITE_CONTRACT_ADDRESS: ${{ env.MAINNET_CONTRACT_ADDRESS }}
        VITE_CHAIN_ID: '8453'
        VITE_API_BASE_URL: 'https://api.project-block.com'
        
    - name: Deploy to production
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./frontend/dist
        cname: project-block.com
        
    - name: Notify deployment success
      run: |
        echo "🎉 Remember Token deployed successfully!" >> $GITHUB_STEP_SUMMARY
        echo "🌐 Website: https://project-block.com" >> $GITHUB_STEP_SUMMARY
        echo "📱 Contract: ${{ env.MAINNET_CONTRACT_ADDRESS }}" >> $GITHUB_STEP_SUMMARY

  notify-discord:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy-frontend-production]
    if: always()
    
    steps:
    - name: Discord notification
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          🎂 **Remember Token Deployment** 
          
          ✅ **Status:** ${{ job.status }}
          🌐 **Website:** https://project-block.com
          📱 **Contract:** ${{ env.MAINNET_CONTRACT_ADDRESS }}
          🔗 **Commit:** ${{ github.sha }}
          
          Ready to start earning tokens for caring! 💝